{"version":3,"sources":["components/Forms/AddEditForm.js","components/Modals/Modal.js","components/Tables/DataTable.js","components/Roster/Roster.js","components/Tables/AttendanceTable.js","components/Attendance/Attendance.js","components/Organization/Organization.js","components/YamlGenerator/YamlGenerator.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","state","id","fname","lname","email","asm","location","slack","paymentplan","cohort","githuborg","onChange","e","setState","target","name","value","submitFormAdd","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","item","Array","isArray","props","addItemToState","toggle","catch","err","submitFormEdit","updateState","this","Form","onSubmit","FormGroup","Label","for","Input","type","placeholder","Button","React","Component","ModalForm","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","DataTable","deleteItem","window","confirm","deleteItemFromState","items","students","length","map","key","scope","width","Table","responsive","hover","Roster","studentList","orgname","handleChange","student","addToDB","getItems","itemIndex","findIndex","data","newArray","slice","updatedItems","filter","deleteAllStudents","event","parseStudents","studentsArr","replace","split","i","arr","studentObj","sort","a","b","Container","fluid","Row","Col","required","rows","handleSubmit","bind","margin","filename","AttendanceTable","present","Attendance","attendenceRecord","chat","fName","lName","paymentPlan","takeAttendance","attendanceArray","toLowerCase","includes","push","fa","fb","Organization","token","sentStudents","forEach","ok","invite","error","githubOrg","inviteOne","inviteAll","YamlGenerator","firstName","list","generateYaml","App","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gZAuIeA,E,4MAnIbC,MAAQ,CACNC,GAAI,GACJC,MAAM,GAAIC,MAAM,GAAIC,MAAM,GAAIC,IAAI,GAAIC,SAAS,GAAIC,MAAM,GAAIC,YAAY,GAAIC,OAAO,GAAGC,UAAU,I,EAGnGC,SAAW,SAAAC,GACT,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAG3CC,cAAgB,SAAAL,GACdA,EAAEM,iBACFC,QAAQC,IAAI,EAAKpB,OACjBqB,MAAM,sDAAuD,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBxB,MAAO,EAAKF,MAAME,MAClBC,MAAO,EAAKH,MAAMG,MAClBC,MAAO,EAAKJ,MAAMI,MAClBC,IAAK,EAAKL,MAAMK,IAChBC,SAAU,EAAKN,MAAMM,SACrBC,MAAO,EAAKP,MAAMO,MAClBC,YAAa,EAAKR,MAAMQ,YACxBC,OAAQ,EAAKT,MAAMS,OACnBC,UAAU,EAAKV,MAAMU,cAGtBiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACDC,MAAMC,QAAQF,IACf,EAAKG,MAAMC,eAAeJ,EAAK,IAC/B,EAAKG,MAAME,UAEXhB,QAAQC,IAAI,cAGfgB,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,EAG9BC,eAAiB,SAAA1B,GACfA,EAAEM,iBACFC,QAAQC,IAAI,EAAKpB,OACjBqB,MAAM,sDAAuD,CAC3DC,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBzB,GAAI,EAAKD,MAAMC,GACfC,MAAO,EAAKF,MAAME,MAClBC,MAAO,EAAKH,MAAMG,MAClBC,MAAO,EAAKJ,MAAMI,MAClBC,IAAK,EAAKL,MAAMK,IAChBC,SAAU,EAAKN,MAAMM,SACrBC,MAAO,EAAKP,MAAMO,MAClBC,YAAa,EAAKR,MAAMQ,YACxBC,OAAQ,EAAKT,MAAMS,OACnBC,UAAU,EAAKV,MAAMU,cAGtBiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAX,QAAQC,IAAIU,GACbC,MAAMC,QAAQF,IAEf,EAAKG,MAAMM,YAAYT,EAAK,IAC5B,EAAKG,MAAME,UAEXhB,QAAQC,IAAI,cAGfgB,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,kEAM5B,GADAlB,QAAQC,IAAIoB,KAAKP,MAAMH,MACpBU,KAAKP,MAAMH,KAAK,CAAC,IAAD,EACwEU,KAAKP,MAAMH,KAA5F7B,EADS,EACTA,GAAIC,EADK,EACLA,MAAOC,EADF,EACEA,MAAOC,EADT,EACSA,MAAOC,EADhB,EACgBA,IAAKC,EADrB,EACqBA,SAAUC,EAD/B,EAC+BA,MAAOC,EADtC,EACsCA,YAAaC,EADnD,EACmDA,OAAOC,EAD1D,EAC0DA,UAC3E8B,KAAK3B,SAAS,CAAEZ,KAAGC,QAAOC,QAAOC,QAAOC,MAAKC,WAAUC,QAAOC,cAAaC,SAAOC,iB,+BAMpF,OADAS,QAAQC,IAAIoB,KAAKxC,OAEf,kBAACyC,EAAA,EAAD,CAAMC,SAAUF,KAAKP,MAAMH,KAAOU,KAAKF,eAAiBE,KAAKvB,eAC3D,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,cACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,QAAQd,GAAG,QAAQU,SAAU6B,KAAK7B,SAAUK,MAA4B,OAArBwB,KAAKxC,MAAME,MAAiB,GAAKsC,KAAKxC,MAAME,SAEzH,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,aACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,QAAQd,GAAG,OAAOU,SAAU6B,KAAK7B,SAAUK,MAA4B,OAArBwB,KAAKxC,MAAMG,MAAiB,GAAKqC,KAAKxC,MAAMG,SAExH,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQhC,KAAK,QAAQd,GAAG,QAAQU,SAAU6B,KAAK7B,SAAUK,MAA4B,OAArBwB,KAAKxC,MAAMI,MAAiB,GAAKoC,KAAKxC,MAAMI,SAE1H,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,OACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,MAAMd,GAAG,QAAQU,SAAU6B,KAAK7B,SAAUK,MAA0B,OAAnBwB,KAAKxC,MAAMK,IAAe,GAAKmC,KAAKxC,MAAMK,IAAM2C,YAAY,gBAEvI,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,WAAWd,GAAG,WAAWU,SAAU6B,KAAK7B,SAAUK,MAA+B,OAAxBwB,KAAKxC,MAAMM,SAAoB,GAAKkC,KAAKxC,MAAMM,SAAW0C,YAAY,iBAEzJ,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,QAAQd,GAAG,QAAQU,SAAU6B,KAAK7B,SAAUK,MAAOwB,KAAKxC,MAAMO,SAExF,kBAACoC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,WAAX,gBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,cAAcd,GAAG,UAAUU,SAAU6B,KAAK7B,SAAUK,MAAOwB,KAAKxC,MAAMQ,eAEhG,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,UACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,SAASd,GAAG,SAASU,SAAU6B,KAAK7B,SAAUK,MAAOwB,KAAKxC,MAAMS,UAE1F,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,uBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,YAAYd,GAAG,YAAYU,SAAU6B,KAAK7B,SAAUK,MAAOwB,KAAKxC,MAAMU,aAEhG,kBAACuC,EAAA,EAAD,oB,GA9HkBC,IAAMC,WC0DjBC,E,kDAxDb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAMRE,OAAS,WACP,EAAKtB,UAAS,SAAAwC,GAAS,MAAK,CAC1BC,OAAQD,EAAUC,WAPpB,EAAKtD,MAAQ,CACXsD,OAAO,GAHQ,E,qDAcf,IAAMC,EAAW,4BAAQC,UAAU,QAAQC,QAASjB,KAAKL,QAAxC,QAEXuB,EAAQlB,KAAKP,MAAM0B,YAErBC,EAAS,GACTC,EAAQ,GAmBZ,MAjBa,SAAVH,GACDE,EAAS,kBAACX,EAAA,EAAD,CACCa,MAAM,UACNL,QAASjB,KAAKL,OACd4B,MAAO,CAACC,MAAO,OAAQC,YAAY,SAAUP,GAEvDG,EAAQ,cAERD,EAAS,kBAACX,EAAA,EAAD,CACCa,MAAM,UACNL,QAASjB,KAAKL,OACd4B,MAAO,CAACC,MAAO,OAAQC,YAAY,SAAUP,GAEvDG,EAAQ,gBAKV,6BACGD,EACD,kBAACM,EAAA,EAAD,CAAOC,OAAQ3B,KAAKxC,MAAMsD,MAAOnB,OAAQK,KAAKL,OAAQqB,UAAWhB,KAAKP,MAAMuB,WAC1E,kBAACY,EAAA,EAAD,CAAajC,OAAQK,KAAKL,OAAQkC,MAAOd,GAAWM,GACpD,kBAACS,EAAA,EAAD,KACE,kBAAC,EAAD,CACEpC,eAAgBM,KAAKP,MAAMC,eAC3BK,YAAaC,KAAKP,MAAMM,YACxBJ,OAAQK,KAAKL,OACbL,KAAMU,KAAKP,MAAMH,c,GAjDPqB,a,QC0EToB,E,4MAxEXC,WAAa,SAAAvE,GACWwE,OAAOC,QAAQ,yBAE/BrD,MAAM,sDAAuD,CACzDC,OAAQ,SACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBzB,SAGH0B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKG,MAAM0C,oBAAoB1E,MAElCmC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,uDAK5B,IAAD,OACDuC,EAAS,4BAAI,yCA2BjB,OA1BIpC,KAAKP,MAAM4C,SAASC,OAAS,IAC7BF,EAAQpC,KAAKP,MAAM4C,SAASE,KAAI,SAAAjD,GAE5B,OADAX,QAAQC,IAAIU,GAER,wBAAIkD,IAAKlD,EAAK7B,IACV,wBAAIgF,MAAM,OAAOnD,EAAK7B,IACtB,4BAAK6B,EAAK5B,OACV,4BAAK4B,EAAK3B,OACV,4BAAK2B,EAAK1B,OACV,4BAAK0B,EAAKzB,KACV,4BAAKyB,EAAKxB,UACV,4BAAKwB,EAAKvB,OACV,4BAAKuB,EAAKtB,aACV,4BAAKsB,EAAKrB,QACV,4BACI,yBAAKsD,MAAO,CAAEmB,MAAO,UACjB,kBAAC,EAAD,CAAWvB,YAAY,OAAO7B,KAAMA,EAAMS,YAAa,EAAKN,MAAMM,cACjE,IACD,kBAACU,EAAA,EAAD,CAAQa,MAAM,SAASL,QAAS,kBAAM,EAAKe,WAAW1C,EAAK7B,MAA3D,cASpB,kBAACkF,EAAA,EAAD,CAAOC,YAAU,EAACC,OAAK,GACnB,+BACI,4BACI,kCACA,qCACA,oCACA,qCACA,mCACA,wCACA,qCACA,4CACA,wCAGR,+BACKT,Q,GAnEGzB,a,QCmMLmC,E,4MA/LftF,MAAQ,CACJ6E,SAAU,GACVU,YAAa,GACb9E,OAAQ,GACR+E,QAAS,I,EAGbC,aAAe,SAAA7E,GACX,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAmC9CkB,eAAiB,SAACwD,GACd,EAAK7E,UAAS,SAAAwC,GAAS,MAAK,CACxBwB,SAAS,GAAD,mBAAMxB,EAAUwB,UAAhB,CAA0Ba,S,EAK1CC,QAAU,SAAAD,GACNrE,MAAM,sDAAuD,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBxB,MAAOwF,EAAQxF,MACfC,MAAOuF,EAAQvF,MACfC,MAAOsF,EAAQtF,MACfC,IAAKqF,EAAQrF,IACbC,SAAUoF,EAAQpF,SAClBC,MAAOmF,EAAQnF,MACfC,YAAakF,EAAQlF,YACrBC,OAAQiF,EAAQjF,OAChBC,UAAWgF,EAAQhF,cAEpBiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC5BF,MAAK,SAAAG,GACL,EAAK8D,cAEHxD,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,EAkBhCE,YAAc,SAACmD,GACXvE,QAAQC,IAAIsE,GACZ,IAAMG,EAAY,EAAK7F,MAAM6E,SAASiB,WAAU,SAAAC,GAAI,OAAIA,EAAK9F,KAAOyF,EAAQzF,MACtE+F,EAAQ,sBAEP,EAAKhG,MAAM6E,SAASoB,MAAM,EAAGJ,IAFtB,CAIVH,GAJU,YAMP,EAAK1F,MAAM6E,SAASoB,MAAMJ,EAAY,KAE7C,EAAKhF,SAAS,CAAEgE,SAAUmB,K,EAG9BrB,oBAAsB,SAAC1E,GACnB,IAAMiG,EAAe,EAAKlG,MAAM6E,SAASsB,QAAO,SAAArE,GAAI,OAAIA,EAAK7B,KAAOA,KACpE,EAAKY,SAAS,CAAEgE,SAAUqB,K,EAG9BE,kBAAoB,WACI3B,OAAOC,QAAQ,yBAE/BrD,MAAM,8CAA+C,CACjDC,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAGnBI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAK8D,cAERxD,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,2DA9GzBgE,GACTA,EAAMnF,iBACNsB,KAAK8D,cAAc9D,KAAKxC,MAAMuF,e,oCAGpBV,GACV,IAAI0B,EAAc1B,EAAS2B,QAAQ,MAAO,KAAKC,MAAM,MACrDtF,QAAQC,IAAImF,GACZ,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAYzB,OAAQ4B,IAAK,CACzC,IAAIC,EAAMJ,EAAYG,GAAGD,MAAM,KAC3BE,EAAI,IACJxF,QAAQC,IAAIuF,EAAID,GAEpB,IAAI1G,EAAQ2G,EAAI,GAAGH,QAAQ,iBAAkB,IAC7CrF,QAAQC,IAAIpB,GACZ,IAAI4G,EACJ,CACI1G,MAAOyG,EAAI,GACXxG,MAAOwG,EAAI,GACXvG,MAAOuG,EAAI,GACXtG,IAAKsG,EAAI,GACTrG,SAAS,GAAD,OAAKqG,EAAI,GAAT,YAAe3G,GACvBQ,YAAamG,EAAI,GACjBpG,MAAOoG,EAAI,IACXlG,OAAQ+B,KAAKxC,MAAMS,OACnBC,UAAW8B,KAAKxC,MAAMwF,SAE1BrE,QAAQC,IAAIuF,GACZnE,KAAKmD,QAAQiB,M,iCAmCT,IAAD,OACPvF,MAAM,uDACDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAkD,GAEFA,EAASgC,MAAK,SAASC,EAAGC,GACtB,OAAOD,EAAE7G,GAAK8G,EAAE9G,MAEpB,EAAKY,SAAS,CAAEgE,gBAEnBzC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,Q,0CA0C1BG,KAAKoD,a,+EASL,OACI,kBAACoB,EAAA,EAAD,CAAWC,OAAK,EAACzD,UAAU,OACvB,kBAAC0D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,sCACJ,8BACQ,yBAAK3D,UAAU,cACX,2DACA,2BAAOT,KAAK,OAAOS,UAAU,eAAevD,GAAG,UAAUc,KAAK,UAAUiC,YAAY,qBAAqBrC,SAAU6B,KAAKiD,aAAczE,MAAOwB,KAAKxC,MAAMwF,QAAS4B,UAAQ,KAE7K,yBAAK5D,UAAU,cACX,gDACA,2BAAOT,KAAK,SAASS,UAAU,eAAevD,GAAG,SAASc,KAAK,SAASiC,YAAY,KAAKrC,SAAU6B,KAAKiD,aAAczE,MAAOwB,KAAKxC,MAAMS,OAAQ2G,UAAQ,KAE5J,yBAAK5D,UAAU,cACX,0DACA,8BAAUA,UAAU,eAAevD,GAAG,cAAcoH,KAAK,KAAKtG,KAAK,cAAcJ,SAAU6B,KAAKiD,aAAczE,MAAOwB,KAAKxC,MAAMuF,eAEpI,yBAAK/B,UAAU,kBACX,yBAAKA,UAAU,aACX,4BAAQA,UAAU,kBAAkBC,QAASjB,KAAK8E,aAAaC,KAAK/E,OAApE,sBAMpB,kBAAC0E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIpD,MAAO,CAAEyD,OAAQ,WAArB,mBAEJ,kBAACL,EAAA,EAAD,KAAK,4BAAQ3D,UAAU,iBAAiBC,QAASjB,KAAK4D,kBAAkBmB,KAAK/E,OAAxE,eAET,kBAAC0E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWtC,SAAUrC,KAAKxC,MAAM6E,SAAUtC,YAAaC,KAAKD,YAAaoC,oBAAqBnC,KAAKmC,wBAG3G,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACK3E,KAAKxC,MAAM6E,SAASC,OAAO,GAAK,kBAAC,UAAD,CAC7B2C,SAAU,SACV3D,MAAM,UACNC,MAAO,CAAEC,MAAO,OAAQC,YAAa,QACrCT,UAAU,kBACVuC,KAAMvD,KAAKxC,MAAM6E,UALY,gBAQjC,kBAAC,EAAD,CAAWlB,YAAY,WAAWzB,eAAgBM,KAAKN,wB,GAxL9DgB,IAAMC,WCoDZuE,E,4MApDXlD,WAAa,SAAAvE,GACWwE,OAAOC,QAAQ,yBAE/BrD,MAAM,sDAAuD,CACzDC,OAAQ,SACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBzB,SAGH0B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKG,MAAM0C,oBAAoB1E,MAElCmC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,uDAMlC,IAAIuC,EAAS,4BAAI,yCAajB,OAZIpC,KAAKP,MAAM4C,SAASC,OAAS,IAC7BF,EAAQpC,KAAKP,MAAM4C,SAASE,KAAI,SAAAjD,GAC5B,OACI,wBAAIkD,IAAKlD,EAAK7B,IACV,wBAAIgF,MAAM,OAAOnD,EAAK7B,IACtB,4BAAK6B,EAAKf,MACV,4BAAKe,EAAK6F,cAOtB,kBAACxC,EAAA,EAAD,CAAOC,YAAU,EAACC,OAAK,GACnB,+BACI,4BACI,kCACA,oCACA,yCAGR,+BACKT,Q,GA/CSzB,aC2KfyE,E,4MAzKX5H,MAAQ,CACJ6E,SAAU,GACVgD,iBAAkB,GAClBC,KAAM,I,EAGVrC,aAAe,SAAA7E,GACX,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAkC9CkB,eAAiB,SAACwD,GACd,EAAK7E,UAAS,SAAAwC,GAAS,MAAK,CACxBwB,SAAS,GAAD,mBAAMxB,EAAUwB,UAAhB,CAA0Ba,S,EAK1CC,QAAU,SAAAD,GACNrE,MAAM,sDAAuD,CACzDC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBqG,MAAOrC,EAAQqC,MACfC,MAAOtC,EAAQsC,MACf5H,MAAOsF,EAAQtF,MACfC,IAAKqF,EAAQrF,IACbC,SAAUoF,EAAQpF,SAClBC,MAAOmF,EAAQnF,MACf0H,YAAavC,EAAQuC,YACrBxH,OAAQiF,EAAQjF,WAErBkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GACF,EAAK8D,cAERxD,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,O,EA2BlCE,YAAc,SAACmD,GACX,IAAMG,EAAY,EAAK7F,MAAM6E,SAASiB,WAAU,SAAAC,GAAI,OAAIA,EAAK9F,KAAOyF,EAAQzF,MACtE+F,EAAQ,sBAEP,EAAKhG,MAAM6E,SAASoB,MAAM,EAAGJ,IAFtB,CAIVH,GAJU,YAMP,EAAK1F,MAAM6E,SAASoB,MAAMJ,EAAY,KAE7C,EAAKhF,SAAS,CAAEgE,SAAUmB,K,EAG9BrB,oBAAsB,SAAC1E,GACnB,IAAMiG,EAAe,EAAKlG,MAAM6E,SAASsB,QAAO,SAAArE,GAAI,OAAIA,EAAK7B,KAAOA,KACpE,EAAKY,SAAS,CAAEgE,SAAUqB,K,2DApGjBG,GACTA,EAAMnF,iBACNsB,KAAK0F,eAAe1F,KAAKxC,MAAM8H,Q,qCAGpBA,GACX,IAAIK,EAAkB,GACtBhH,QAAQC,IAAI0G,GACZA,EAAOA,EAAKM,cACZ5F,KAAKxC,MAAM6E,SAASgC,MAAK,SAAUC,EAAGC,GAClC,OAAOD,EAAE5G,MAAQ6G,EAAE7G,SAEvBiB,QAAQC,IAAIoB,KAAKxC,MAAM6E,UACvB,IAAK,IAAI6B,EAAI,EAAGA,EAAIlE,KAAKxC,MAAM6E,SAASC,OAAQ4B,IAAK,CACjD,IAAIhB,EAAUlD,KAAKxC,MAAM6E,SAAS6B,GAC9B3F,EAAI,UAAM2E,EAAQxF,MAAMkI,cAApB,YAAqC1C,EAAQvF,MAAMiI,eAC9C,KAATrH,IACI+G,EAAKO,SAAStH,IAAS+G,EAAKO,SAAS3C,EAAQxF,MAAMkI,cAAgBN,EAAKO,SAAS3C,EAAQxF,OACzFiI,EAAgBG,KAAK,CAAErI,GAAIyF,EAAQzF,GAAIc,KAAMA,EAAM4G,QAAS,MAE5DQ,EAAgBG,KAAK,CAAErI,GAAIyF,EAAQzF,GAAIc,KAAMA,EAAM4G,QAAS,OAMxExG,QAAQC,IAAI+G,GACZ3F,KAAK3B,SAAS,CAAEgH,iBAAkBM,IAClChH,QAAQC,IAAI+G,K,iCAiCJ,IAAD,OACP9G,MAAM,uDACDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAkD,GACFA,EAASgC,MAAK,SAACC,EAAGC,GACd,IAAIwB,EAAKzB,EAAE5G,MAAMkI,cACjBI,EAAKzB,EAAE7G,MAAMkI,cAEjB,OAAIG,EAAKC,GACG,EAERD,EAAKC,EACE,EAEJ,KAEPrH,QAAQC,IAAIyD,GACZ,EAAKhE,SAAS,CAAEgE,gBAEnBzC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,Q,0CAyB9BG,KAAKoD,a,+EAUL,OACI,kBAACoB,EAAA,EAAD,CAAWC,OAAK,EAACzD,UAAU,OACvB,kBAAC0D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,0CACA,8BACI,yBAAK3D,UAAU,cACX,kDACA,8BAAUA,UAAU,eAAevD,GAAG,OAAOoH,KAAK,KAAKtG,KAAK,OAAOJ,SAAU6B,KAAKiD,aAAczE,MAAOwB,KAAKxC,MAAM8H,QAEtH,yBAAKtE,UAAU,kBACX,yBAAKA,UAAU,aACX,4BAAQA,UAAU,kBAAkBC,QAASjB,KAAK8E,aAAaC,KAAK/E,OAApE,kBAMpB,kBAAC0E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIpD,MAAO,CAAEyD,OAAQ,WAArB,gBAGR,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAiBtC,SAAUrC,KAAKxC,MAAM6H,iBAAkBtF,YAAaC,KAAKD,YAAaoC,oBAAqBnC,KAAKmC,wBAGzH,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACK3E,KAAKxC,MAAM6H,iBAAiB/C,OAAS,GAAK,kBAAC,UAAD,CACvC2C,SAAU,iBACV3D,MAAM,UACNC,MAAO,CAAEC,MAAO,OAAQC,YAAa,QACrCT,UAAU,kBACVuC,KAAMvD,KAAKxC,MAAM6H,kBALsB,uB,GA5J1C3E,IAAMC,WC0HhBsF,E,4MA3HXzI,MAAQ,CACJ6E,SAAU,GACV6D,MAAO,4C,kEAIPlG,KAAKoD,a,iCAGG,IAAD,OACPvE,MAAM,uDACDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAkD,GAEF,EAAKhE,SAAS,CAAEgE,gBAEnBzC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,Q,kFAOrB,IAAD,OACJsG,EAAe,GACfnG,KAAKxC,MAAM6E,SAASC,OAAS,GAC7BtC,KAAKxC,MAAM6E,SAAS+D,SAAQ,SAAAlD,GACxBrE,MAAM,+BAAD,OAAgCqE,EAAQhF,UAAxC,qCAA8E,EAAKV,MAAM0I,OAAS,CACnGpH,OAAQ,OACRE,KAAMC,KAAKC,UAAU,CACjB,MAASgE,EAAQtF,MACjB,KAAQ,oBAEbuB,MAAK,SAAAoE,GACAA,EAAK8C,IACL1H,QAAQC,IAAIsE,GACZA,EAAQoD,OAAS,OAGjBpD,EAAQoD,OAAS,KAErBH,EAAaL,KAAK5C,GAClBvE,QAAQC,IAAIuH,GACZ,EAAK9H,SAAS,CAAEgE,SAAU8D,OAC3BvG,OAAM,SAAC2G,GACN5H,QAAQ4H,MAAM,SAAUA,W,gCAM9BC,EAAU5I,M,+BAuBV,IAAD,OACDwE,EAAS,4BAAI,yCAyBjB,OAxBIpC,KAAKxC,MAAM6E,SAASC,OAAS,IAC7BF,EAAQpC,KAAKxC,MAAM6E,SAASE,KAAI,SAAAjD,GAC5BX,QAAQC,IAAIU,GACZ,IAAIgH,EAAO,GAQX,OAPA3H,QAAQC,IAAIU,EAAKgH,QAEbA,EADY,OAAbhH,EAAKgH,OACM,4BAAKhH,EAAKgH,OAAV,KAEA,4BAAI,kBAAC7F,EAAA,EAAD,CAAQa,MAAM,UAAUL,QAAS,kBAAM,EAAKwF,UAAUnH,KAAtD,WAId,wBAAIkD,IAAKlD,EAAK7B,IACV,wBAAIgF,MAAM,OAAOnD,EAAK7B,IACtB,4BAAK6B,EAAK5B,OACV,4BAAK4B,EAAK3B,OACV,4BAAK2B,EAAK1B,OACV,4BAAK0B,EAAKrB,QACV,4BAAKqB,EAAKpB,WACToI,OAMb,kBAAC9B,EAAA,EAAD,KACI,4CADJ,QAC8B,kBAAC/D,EAAA,EAAD,CAAQa,MAAM,UAAUL,QAAS,kBAAM,EAAKyF,cAA5C,cAC1B,kBAAC/D,EAAA,EAAD,CAAOC,YAAU,EAACC,OAAK,GACnB,+BACI,4BACI,kCACA,qCACA,oCACA,qCACA,sCACA,4CACA,8CAGR,+BACKT,S,GArHE1B,IAAMC,WCgElBgG,E,4MA/DXnJ,MAAQ,CACJ6E,SAAU,I,kEAIVrC,KAAKoD,a,mFAOIhF,GACTA,EAAEM,iBACFC,QAAQC,IAAI,gB,iCAiBJ,IAAD,OACPC,MAAM,uDACDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAkD,GACF1D,QAAQC,IAAIyD,GACZ,EAAKhE,SAAS,CAAEgE,gBAEnBzC,OAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,Q,kCAGtB+G,EAAWC,M,+BAKnB,OACI,kBAACrC,EAAA,EAAD,KACI,6CACA,kBAACvE,EAAA,EAAD,CAAMC,SAAUF,KAAK8G,cACjB,kBAAC3G,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,cACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOhC,KAAK,QAAQd,GAAG,QAAQU,SAAU6B,KAAK7B,SAAUK,MAA4B,OAArBwB,KAAKxC,MAAM+H,MAAiB,GAAKvF,KAAKxC,MAAM+H,SAE3H,kBAACpF,EAAA,EAAD,MAEA,kBAACM,EAAA,EAAD,qB,GAzDQC,IAAMC,W,eC6DnBoG,MAhDf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,yBAAK/F,UAAU,0EACb,uBAAGA,UAAU,eAAegG,KAAK,KAAjC,UACA,4BAAQhG,UAAU,iBAAiBT,KAAK,SAAS0G,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMrG,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BvD,GAAG,aAC3C,wBAAIuD,UAAU,cACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWsG,GAAG,KAA9B,WAEF,wBAAItG,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWsG,GAAG,SAA9B,wBAEF,wBAAItG,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWsG,GAAG,eAA9B,qBAEF,wBAAItG,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWsG,GAAG,iBAA9B,gCAQR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,iBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WC5CQC,QACW,cAA7BvF,OAAOnE,SAAS2J,UAEe,UAA7BxF,OAAOnE,SAAS2J,UAEhBxF,OAAOnE,SAAS2J,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/I,MAAK,SAAAgJ,GACJA,EAAaC,gBAEdxI,OAAM,SAAA2G,GACL5H,QAAQ4H,MAAMA,EAAM8B,c","file":"static/js/main.615f8d52.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nclass AddEditForm extends React.Component {\r\n  state = {\r\n    id: '',\r\n    fname:'', lname:'', email:'', asm:'', location:'', slack:'', paymentplan:'', cohort:'',githuborg:''\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n  submitFormAdd = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        fname: this.state.fname,\r\n        lname: this.state.lname,\r\n        email: this.state.email,\r\n        asm: this.state.asm,\r\n        location: this.state.location,\r\n        slack: this.state.slack,\r\n        paymentplan: this.state.paymentplan,\r\n        cohort: this.state.cohort,\r\n        githuborg:this.state.githuborg\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(item => {\r\n        if(Array.isArray(item)) {\r\n          this.props.addItemToState(item[0])\r\n          this.props.toggle()\r\n        } else {\r\n          console.log('failure')\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  submitFormEdit = e => {\r\n    e.preventDefault()\r\n    console.log(this.state);\r\n    fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n      method: 'put',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        id: this.state.id,\r\n        fname: this.state.fname,\r\n        lname: this.state.lname,\r\n        email: this.state.email,\r\n        asm: this.state.asm,\r\n        location: this.state.location,\r\n        slack: this.state.slack,\r\n        paymentplan: this.state.paymentplan,\r\n        cohort: this.state.cohort, \r\n        githuborg:this.state.githuborg\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(item => {\r\n            console.log(item)\r\n        if(Array.isArray(item)) {\r\n         \r\n          this.props.updateState(item[0])\r\n          this.props.toggle()\r\n        } else {\r\n          console.log('failure')\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  componentDidMount(){\r\n    // if item exists, populate the state with proper data\r\n    console.log(this.props.item)\r\n    if(this.props.item){\r\n      const { id, fname, lname, email, asm, location, slack, paymentplan, cohort,githuborg } = this.props.item\r\n      this.setState({ id,fname, lname, email, asm, location, slack, paymentplan, cohort,githuborg })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (\r\n      <Form onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}>\r\n        <FormGroup>\r\n          <Label for=\"first\">First Name</Label>\r\n          <Input type=\"text\" name=\"fname\" id=\"first\" onChange={this.onChange} value={this.state.fname === null ? '' : this.state.fname} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"last\">Last Name</Label>\r\n          <Input type=\"text\" name=\"lname\" id=\"last\" onChange={this.onChange} value={this.state.lname === null ? '' : this.state.lname}  />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"email\">Email</Label>\r\n          <Input type=\"email\" name=\"email\" id=\"email\" onChange={this.onChange} value={this.state.email === null ? '' : this.state.email}  />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"phone\">ASM</Label>\r\n          <Input type=\"text\" name=\"asm\" id=\"phone\" onChange={this.onChange} value={this.state.asm === null ? '' : this.state.asm}  placeholder=\"Suzy Smith\" />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"location\">Location</Label>\r\n          <Input type=\"text\" name=\"location\" id=\"location\" onChange={this.onChange} value={this.state.location === null ? '' : this.state.location}  placeholder=\"City, State\" />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"hobby\">Slack</Label>\r\n          <Input type=\"text\" name=\"slack\" id=\"hobby\" onChange={this.onChange} value={this.state.slack}  />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"payment\">Payment Type</Label>\r\n          <Input type=\"text\" name=\"paymentplan\" id=\"payment\" onChange={this.onChange} value={this.state.paymentplan}  />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"cohort\">Cohort</Label>\r\n          <Input type=\"text\" name=\"cohort\" id=\"cohort\" onChange={this.onChange} value={this.state.cohort}  />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"cohort\">Github Organization</Label>\r\n          <Input type=\"text\" name=\"githuborg\" id=\"githuborg\" onChange={this.onChange} value={this.state.githuborg}  />\r\n        </FormGroup>\r\n        <Button>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddEditForm;","import React, { Component } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\r\nimport AddEditForm from '../Forms/AddEditForm';\r\n\r\nclass ModalForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modal: false\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }))\r\n  }\r\n\r\n  render() {\r\n      const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>\r\n\r\n      const label = this.props.buttonLabel\r\n\r\n      let button = ''\r\n      let title = ''\r\n\r\n      if(label === 'Edit'){\r\n        button = <Button\r\n                  color=\"warning\"\r\n                  onClick={this.toggle}\r\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\r\n                </Button>\r\n        title = 'Edit Item'\r\n      } else {\r\n        button = <Button\r\n                  color=\"success\"\r\n                  onClick={this.toggle}\r\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\r\n                </Button>\r\n        title = 'Add New Item'\r\n      }\r\n\r\n\r\n      return (\r\n      <div>\r\n        {button}\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n          <ModalHeader toggle={this.toggle} close={closeBtn}>{title}</ModalHeader>\r\n          <ModalBody>\r\n            <AddEditForm\r\n              addItemToState={this.props.addItemToState}\r\n              updateState={this.props.updateState}\r\n              toggle={this.toggle}\r\n              item={this.props.item} />\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ModalForm","import React, { Component } from 'react'\r\nimport { Table, Button } from 'reactstrap';\r\nimport ModalForm from '../Modals/Modal'\r\n\r\nclass DataTable extends Component {\r\n\r\n    deleteItem = id => {\r\n        let confirmDelete = window.confirm('Delete item forever?')\r\n        if (confirmDelete) {\r\n            fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n                method: 'delete',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(item => {\r\n                    this.props.deleteItemFromState(id)\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let items = (<tr><td>No Items</td></tr>);\r\n        if (this.props.students.length > 0) {\r\n            items = this.props.students.map(item => {\r\n                console.log(item)\r\n                return (\r\n                    <tr key={item.id}>\r\n                        <th scope=\"row\">{item.id}</th>\r\n                        <td>{item.fname}</td>\r\n                        <td>{item.lname}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.asm}</td>\r\n                        <td>{item.location}</td>\r\n                        <td>{item.slack}</td>\r\n                        <td>{item.paymentplan}</td>\r\n                        <td>{item.cohort}</td>\r\n                        <td>\r\n                            <div style={{ width: \"110px\" }}>\r\n                                <ModalForm buttonLabel=\"Edit\" item={item} updateState={this.props.updateState} />\r\n                                {' '}\r\n                                <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Del</Button>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Table responsive hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>First</th>\r\n                        <th>Last</th>\r\n                        <th>Email</th>\r\n                        <th>ASM</th>\r\n                        <th>Location</th>\r\n                        <th>Slack</th>\r\n                        <th>Payment Type</th>\r\n                        <th>Cohort</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTable","import React from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport ModalForm from '../Modals/Modal';\r\nimport DataTable from '../Tables/DataTable';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass Roster extends React.Component {\r\n\r\n    state = {\r\n        students: [],\r\n        studentList: '',\r\n        cohort: '',\r\n        orgname: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.parseStudents(this.state.studentList);\r\n    }\r\n\r\n    parseStudents(students) {\r\n        let studentsArr = students.replace(/\\t/g, \",\").split(\"\\n\");\r\n        console.log(studentsArr);\r\n        for (let i = 0; i < studentsArr.length; i++) {\r\n            let arr = studentsArr[i].split(\",\");\r\n            if(!arr[6]){\r\n                console.log(arr,i);\r\n            }\r\n            let state = arr[6].replace(/;not started;/g, \"\");\r\n            console.log(state);\r\n            let studentObj = \r\n            {\r\n                fname: arr[0],\r\n                lname: arr[1],\r\n                email: arr[2],\r\n                asm: arr[3],\r\n                location: `${arr[5]},${state}`,\r\n                paymentplan: arr[8],\r\n                slack: arr[10],\r\n                cohort: this.state.cohort,\r\n                githuborg: this.state.orgname\r\n            };\r\n            console.log(arr);\r\n            this.addToDB(studentObj);\r\n        }\r\n    }\r\n\r\n    addItemToState = (student) => {\r\n        this.setState(prevState => ({\r\n            students: [...prevState.students, student]\r\n        }))\r\n    }\r\n\r\n    \r\n    addToDB = student => {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n          method: 'post',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            fname: student.fname,\r\n            lname: student.lname,\r\n            email: student.email,\r\n            asm: student.asm,\r\n            location: student.location,\r\n            slack: student.slack,\r\n            paymentplan: student.paymentplan,\r\n            cohort: student.cohort,\r\n            githuborg: student.githuborg\r\n          })\r\n        }).then(response => response.json())\r\n        .then(item => {\r\n         this.getItems();\r\n          })\r\n          .catch(err => console.log(err))\r\n      }\r\n\r\n    getItems() {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students')\r\n            .then(response => response.json())\r\n            .then(students => {\r\n                //console.log(students);\r\n                students.sort(function(a, b) { \r\n                    return a.id - b.id ;\r\n                  });\r\n                this.setState({ students })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n\r\n    updateState = (student) => {\r\n        console.log(student);\r\n        const itemIndex = this.state.students.findIndex(data => data.id === student.id)\r\n        const newArray = [\r\n            // destructure all items from beginning to the indexed item\r\n            ...this.state.students.slice(0, itemIndex),\r\n            // add the updated item to the array\r\n            student,\r\n            // add the rest of the items to the array from the index after the replaced item\r\n            ...this.state.students.slice(itemIndex + 1)\r\n        ]\r\n        this.setState({ students: newArray })\r\n    }\r\n\r\n    deleteItemFromState = (id) => {\r\n        const updatedItems = this.state.students.filter(item => item.id !== id)\r\n        this.setState({ students: updatedItems })\r\n    }\r\n\r\n    deleteAllStudents = () => {\r\n        let confirmDelete = window.confirm('Delete all Students?')\r\n        if (confirmDelete) {\r\n            fetch('https://instructor-tools-api.herokuapp.com/', {\r\n                method: 'delete',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(item => {\r\n                    this.getItems();\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n        componentDidMount() {\r\n            this.getItems();\r\n        }\r\n\r\n        componentWillUnmount() {\r\n\r\n        }\r\n\r\n\r\n        render() {\r\n            return (\r\n                <Container fluid className=\"App\">\r\n                    <Row>\r\n                        <Col>\r\n                            <h2>Roster</h2>\r\n                        <form>\r\n                                <div className=\"form-group\">\r\n                                    <label>Github Organization Name</label>\r\n                                    <input type=\"text\" className=\"form-control\" id=\"orgname\" name=\"orgname\" placeholder=\"thinkful-ei-animal\" onChange={this.handleChange} value={this.state.orgname} required/>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label>Cohort Number</label>\r\n                                    <input type=\"number\" className=\"form-control\" id=\"cohort\" name=\"cohort\" placeholder=\"45\" onChange={this.handleChange} value={this.state.cohort} required />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label>Paste Student List Here</label>\r\n                                    <textarea className=\"form-control\" id=\"studentList\" rows=\"10\" name=\"studentList\" onChange={this.handleChange} value={this.state.studentList} />\r\n                                </div>\r\n                                <div className=\"form-group row\">\r\n                                    <div className=\"col-sm-10\">\r\n                                        <button className=\"btn btn-primary\" onClick={this.handleSubmit.bind(this)}>Load Students</button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 style={{ margin: \"20px 0\" }}>Student Roster</h1>\r\n                        </Col>\r\n                        <Col><button className=\"btn btn-danger\" onClick={this.deleteAllStudents.bind(this)}>Clear All</button></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <DataTable students={this.state.students} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {this.state.students.length>0 && <CSVLink\r\n                                filename={\"db.csv\"}\r\n                                color=\"primary\"\r\n                                style={{ float: \"left\", marginRight: \"10px\" }}\r\n                                className=\"btn btn-primary\"\r\n                                data={this.state.students}>\r\n                                Download CSV\r\n                        </CSVLink>}\r\n                            <ModalForm buttonLabel=\"Add Item\" addItemToState={this.addItemToState} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n    export default Roster;\r\n","import React, { Component } from 'react'\r\nimport { Table, Button } from 'reactstrap';\r\nimport ModalForm from '../Modals/Modal'\r\n\r\nclass AttendanceTable extends Component {\r\n\r\n    deleteItem = id => {\r\n        let confirmDelete = window.confirm('Delete item forever?')\r\n        if (confirmDelete) {\r\n            fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n                method: 'delete',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(item => {\r\n                    this.props.deleteItemFromState(id)\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let items = (<tr><td>No Items</td></tr>);\r\n        if (this.props.students.length > 0) {\r\n            items = this.props.students.map(item => {\r\n                return (\r\n                    <tr key={item.id}>\r\n                        <th scope=\"row\">{item.id}</th>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.present}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Table responsive hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Name</th>\r\n                        <th>Present</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AttendanceTable;","import React from \"react\";\r\nimport AttendanceTable from '../Tables/AttendanceTable';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport ModalForm from '../Modals/Modal';\r\nclass Attendance extends React.Component {\r\n    state = {\r\n        students: [],\r\n        attendenceRecord: [],\r\n        chat: \"\"\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.takeAttendance(this.state.chat);\r\n    }\r\n\r\n    takeAttendance(chat) {\r\n        let attendanceArray = [];\r\n        console.log(chat);\r\n        chat = chat.toLowerCase();\r\n        this.state.students.sort(function (a, b) {\r\n            return a.fname - b.fname;\r\n        });\r\n        console.log(this.state.students)\r\n        for (let i = 0; i < this.state.students.length; i++) {\r\n            let student = this.state.students[i];\r\n            let name = `${student.fname.toLowerCase()} ${student.lname.toLowerCase()}`;\r\n            if (name !== \"\") {\r\n                if (chat.includes(name) || chat.includes(student.fname.toLowerCase) || chat.includes(student.fname)) {\r\n                    attendanceArray.push({ id: student.id, name: name, present: \"x\" })\r\n                } else {\r\n                    attendanceArray.push({ id: student.id, name: name, present: \" \" })\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        console.log(attendanceArray)\r\n        this.setState({ attendenceRecord: attendanceArray });\r\n        console.log(attendanceArray);\r\n    }\r\n\r\n    addItemToState = (student) => {\r\n        this.setState(prevState => ({\r\n            students: [...prevState.students, student]\r\n        }))\r\n    }\r\n\r\n\r\n    addToDB = student => {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                fName: student.fName,\r\n                lName: student.lName,\r\n                email: student.email,\r\n                asm: student.asm,\r\n                location: student.location,\r\n                slack: student.slack,\r\n                paymentPlan: student.paymentPlan,\r\n                cohort: student.cohort\r\n            })\r\n        }).then(response => response.json())\r\n            .then(item => {\r\n                this.getItems();\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    getItems() {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students')\r\n            .then(response => response.json())\r\n            .then(students => {\r\n                students.sort((a, b)=> {\r\n                    let fa = a.fname.toLowerCase(),\r\n                    fb = b.fname.toLowerCase();\r\n            \r\n                if (fa < fb) {\r\n                    return -1;\r\n                }\r\n                if (fa > fb) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n                });\r\n                console.log(students)\r\n                this.setState({ students })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n\r\n    updateState = (student) => {\r\n        const itemIndex = this.state.students.findIndex(data => data.id === student.id)\r\n        const newArray = [\r\n            // destructure all items from beginning to the indexed item\r\n            ...this.state.students.slice(0, itemIndex),\r\n            // add the updated item to the array\r\n            student,\r\n            // add the rest of the items to the array from the index after the replaced item\r\n            ...this.state.students.slice(itemIndex + 1)\r\n        ]\r\n        this.setState({ students: newArray })\r\n    }\r\n\r\n    deleteItemFromState = (id) => {\r\n        const updatedItems = this.state.students.filter(item => item.id !== id)\r\n        this.setState({ students: updatedItems })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getItems();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"App\">\r\n                <Row>\r\n                    <Col>\r\n                        <h2>Attendance</h2>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label>Paste Chat Here</label>\r\n                                <textarea className=\"form-control\" id=\"chat\" rows=\"10\" name=\"chat\" onChange={this.handleChange} value={this.state.chat} />\r\n                            </div>\r\n                            <div className=\"form-group row\">\r\n                                <div className=\"col-sm-10\">\r\n                                    <button className=\"btn btn-primary\" onClick={this.handleSubmit.bind(this)}>Scan Chat</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h1 style={{ margin: \"20px 0\" }}>Attendance</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <AttendanceTable students={this.state.attendenceRecord} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {this.state.attendenceRecord.length > 0 && <CSVLink\r\n                            filename={\"attendance.csv\"}\r\n                            color=\"primary\"\r\n                            style={{ float: \"left\", marginRight: \"10px\" }}\r\n                            className=\"btn btn-primary\"\r\n                            data={this.state.attendenceRecord}>\r\n                            Download CSV\r\n                      </CSVLink>}\r\n                    </Col>\r\n                </Row>\r\n            </Container>);\r\n    }\r\n}\r\n\r\nexport default Attendance;\r\n","import React from \"react\";\r\nimport { Table, Button, Container } from 'reactstrap';\r\n\r\nclass Organization extends React.Component {\r\n    state = {\r\n        students: [],\r\n        token: '3809ca6cf76657811d232104d1c55f683d6003be'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getItems();\r\n    }\r\n\r\n    getItems() {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students')\r\n            .then(response => response.json())\r\n            .then(students => {\r\n                //console.log(students);\r\n                this.setState({ students })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    inviteAll() {\r\n        let sentStudents = [];\r\n        if (this.state.students.length > 0) {\r\n            this.state.students.forEach(student => {\r\n                fetch(`https://api.github.com/orgs/${student.githuborg}/invitations?access_token=${this.state.token}`, {\r\n                    method: 'post',\r\n                    body: JSON.stringify({\r\n                        \"email\": student.email,\r\n                        \"role\": \"direct_member\"\r\n                    })\r\n                }).then(data => {\r\n                    if (data.ok) {\r\n                        console.log(student)\r\n                        student.invite = \"yes\";\r\n\r\n                    } else {\r\n                        student.invite = \"no\";\r\n                    }\r\n                    sentStudents.push(student);\r\n                    console.log(sentStudents);\r\n                    this.setState({ students: sentStudents })\r\n                }).catch((error) => {\r\n                    console.error('Error:', error);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    inviteOne(githubOrg,email){\r\n       /* fetch(`https://api.github.com/orgs/${githubOrg}/invitations?access_token=${this.state.token}`, {\r\n            method: 'post',\r\n            body: JSON.stringify({\r\n                \"email\": email,\r\n                \"role\": \"direct_member\"\r\n            })\r\n        }).then(data => {\r\n            if (data.ok) {\r\n                console.log(student)\r\n                student.invite = \"yes\";\r\n\r\n            } else {\r\n                student.invite = \"no\";\r\n            }\r\n            sentStudents.push(student);\r\n            console.log(sentStudents);\r\n            this.setState({ students: sentStudents })\r\n        }).catch((error) => {\r\n            console.error('Error:', error);\r\n        });*/\r\n    }\r\n\r\n    render() {\r\n        let items = (<tr><td>No Items</td></tr>);\r\n        if (this.state.students.length > 0) {\r\n            items = this.state.students.map(item => {\r\n                console.log(item)\r\n                let invite=\"\";\r\n                console.log(item.invite);\r\n                if(item.invite==\"yes\"){\r\n                    invite = (<td>{item.invite} </td>);\r\n                } else{\r\n                    invite = (<td><Button color=\"primary\" onClick={() => this.inviteOne(item)}>Resend</Button></td>);\r\n                }\r\n           \r\n                return (\r\n                    <tr key={item.id}>\r\n                        <th scope=\"row\">{item.id}</th>\r\n                        <td>{item.fname}</td>\r\n                        <td>{item.lname}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.cohort}</td>\r\n                        <td>{item.githuborg}</td>\r\n                        {invite}\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <Container>\r\n                <h2>Organization</h2>     <Button color=\"primary\" onClick={() => this.inviteAll()}>Invite All</Button>\r\n                <Table responsive hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>First</th>\r\n                            <th>Last</th>\r\n                            <th>Email</th>\r\n                            <th>Cohort</th>\r\n                            <th>Organization</th>\r\n                            <th>Invite Sent?</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>);\r\n    }\r\n}\r\n\r\nexport default Organization;\r\n","import React from \"react\";\r\nimport { Container, Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nclass YamlGenerator extends React.Component {\r\n    state = {\r\n        students: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getItems();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    generateYaml(e) {\r\n        e.preventDefault();\r\n        console.log(\"generating\");\r\n       /* for (let i = 0; i < nameList.length; i++) {\r\n            let name = nameList[i].split(\" \");\r\n            if (name !== \"\") {\r\n                let firstName = name[0];\r\n                console.log(name, name[1]);\r\n                let lastInitial = name[1].charAt(0).toUpperCase();\r\n                console.log(this.checkIfDups(firstName, nameList))\r\n                if (this.checkIfDups(firstName, nameList)) {\r\n                    input[i] = `  - name: ${nameList[i]}\\n   shortName: ${firstName}${lastInitial}\\n`;\r\n                } else {\r\n                    input[i] = `  - name: ${nameList[i]}\\n`;\r\n                }\r\n            }\r\n        }*/\r\n    }\r\n\r\n    getItems() {\r\n        fetch('https://instructor-tools-api.herokuapp.com/students')\r\n            .then(response => response.json())\r\n            .then(students => {\r\n                console.log(students);\r\n                this.setState({ students })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    checkIfDups(firstName, list) {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h2>YamlGenerator</h2>\r\n                <Form onSubmit={this.generateYaml}>\r\n                    <FormGroup>\r\n                        <Label for=\"first\">First Name</Label>\r\n                        <Input type=\"text\" name=\"fName\" id=\"first\" onChange={this.onChange} value={this.state.fName === null ? '' : this.state.fName} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                    </FormGroup>\r\n                    <Button>Submit</Button>\r\n                </Form>\r\n\r\n            </Container>);\r\n    }\r\n}\r\n\r\nexport default YamlGenerator;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Roster from './components/Roster/Roster';\nimport Attendance from './components/Attendance/Attendance';\nimport Organization from './components/Organization/Organization';\nimport YamlGenerator from './components/YamlGenerator/YamlGenerator';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light  justify-content-between\">\n          <a className=\"navbar-brand\" href=\"/\">Navbar</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">Roster</Link>\n              </li>\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/yaml\">Yaml File Generator</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/attendance\">Attendance Taker</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/organization\">Github Org Invite Sender</Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/yaml\">\n            <YamlGenerator />\n          </Route>\n          <Route path=\"/attendance\">\n           <Attendance />\n          </Route>\n          <Route path=\"/organization\">\n           <Organization />\n          </Route>\n          <Route path=\"/\">\n            <Roster />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}